---
title: "테스트"
layout: book
date: 2023-03-13 17:00 +0900
image: /assets/images/markdown.jpg
headerImage: false
tag:
- c
- c++
star: true
category: book
author: jamesfoster
description: Markdown summary with different options
---


2023년 3월 13일



{% highlight c %}
#include<stdio.h>

#define DEBUG_MODE

#define ARR_LEN 5
int queue[ARR_LEN] = { 0 };
int index = 0;

void Put(int _data);
int Get();
void Print();


int main(void)
{
	for (int i = 0; i < 7; ++i) Put(i + 1);
	Print();
	printf("Get: %d\n", Get());
	printf("Get: %d\n", Get());
	printf("Get: %d\n", Get());
	Print();

	Put(100);
	Print();

	for (int i = 0; i < 7; ++i) Get();

	return 0;
}

void Put(int _data)
{
	if (index >= ARR_LEN)
	{
		printf("Overflow!!\n");
			return;
	}

	//if (index < ARR_LEN)
	{
#ifdef DEBUG_MODE

		printf("queqe[%d] <- %d\n", index, _data);
#endif 		
		queue[index] = _data;
		++index;
	}
}

int Get()
{
	if (index == 0)
	{
		printf("[Get Failed]: Queue is empty!\n");
		return -1234;
	}

	int returnValue = queue[0];

    // 1. index 전 까지 반복
	for (int i = 0; i < index - 1; ++i)
	{
		// 2. 2->1, 3->2
		// : 0 <- 0+1, 1 <- 1+1
		queue[i] = queue[i + 1];
	}
	--index;

	return returnValue;

}


void Print()
{
	if (index == 0)
	{
		printf("Queue is empty!\n");
		return 0;
	
	}

	for (int i = 0; i < index; ++i)
		printf("%d -", queue[i]);
	printf("(%d)\n", index);
}
{% endhighlight %}

큐 = 원형
{% highlight c %}
#include <stdio.h>
#define MAX 5
int head = -1;
int tail = -1;
int queue[MAX];
int index = 0;



void Print(void) {
    if (index == 0)
    {
        printf("Queue is empty!\n");
        return 0;

    }

    for (int i = 0; i < index; ++i)
        printf("%d -", queue[i]);
    printf("(%d)\n", index);
}

int IsEmpty(void) {
    if (head == tail)//front와 rear가 같으면 큐는 비어있는 상태 
        return 1;
    else return 0;
}
int IsFull(void) {
    int tmp = (tail + 1) % MAX; //원형 큐에서 rear+1을 MAX로 나눈 나머지값이
    if (tmp == head)//front와 같으면 큐는 가득차 있는 상태 
        return 1;
    else
        return 0;
}
void Put(int value) {
    if (IsFull())
        printf("Queue is Full.\n");
    else {
        tail = (tail + 1) % MAX;
        queue[tail] = value;
    }

}
int Get() {
    if (IsEmpty())
        printf("Queue is Empty.\n");
    else {
        head = (head + 1) % MAX;
        return queue[head];
    }
}

int main() {

    Put(4);
    Put(7);
    Put(12);
    printf("%d\n", Get());
    printf("%d\n", Get());
    printf("%d\n", Get());
    Get();

    return 0;
}

{% endhighlight %}